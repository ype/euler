"""
Project Euler Problem 2
=======================

Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms will be:

                  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Find the sum of all the even-valued terms in the sequence which do not
exceed four million.
"""

import math

def fib(n):
    if n == 0: return 0
    elif n == 1: return 1
    else: return fib(n - 1) + fib(n - 2)

def fastFib(n):
    return ((1 + math.sqrt(5))**n - (1 - math.sqrt(5))**n)/(2**n * math.sqrt(5))

def solution(n):
    totalsum = 0
    for i in range(0,n):
        if round(fastFib(i)) % 2 is 0 and round(fastFib(i)) <= 4000000:
            totalsum += round(fastFib(i))
        elif(round(fastFib(i)) >= 4000000):
            return totalsum

print(solution(40))
